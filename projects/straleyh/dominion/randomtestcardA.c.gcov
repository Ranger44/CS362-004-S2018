        -:    0:Source:randomtestcardA.c
        -:    0:Graph:randomtestcardA.gcno
        -:    0:Data:randomtestcardA.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#include<time.h>
        -:    9:
function main called 1 returned 100% blocks executed 90%
        1:   10:void main() 
        -:   11:{
        1:   12:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   13:
        -:   14:    int i, j, m, a;
        1:   15:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   16:    //int seed = 1000;
        -:   17:    //int numPlayers = 2;
        1:   18:    int player=0;
        -:   19:	struct gameState state, test;
        1:   20:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   21:			sea_hag, tribute, smithy, council_room};
        1:   22:	int count1 = 0;
        1:   23:	int count2 = 0;
        -:   24:	
       51:   25:	for(a = 0; a < 50; a++)
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
        -:   26:	{
       50:   27:		int numPlayers = (rand() % 50);
call    0 returned 100%
       50:   28:		int seed = (rand() % 5000);
call    0 returned 100%
        -:   29:
        -:   30:		// initialize a game state and player cards
       50:   31:		initializeGame(numPlayers, k, seed, &state);
call    0 returned 100%
        -:   32:
       50:   33:		printf("\n----------Testing Adventurer Card Pass %d/50----------\n", a+1);
call    0 returned 100%
        -:   34:
        -:   35:		// copy the game state to a test case
       50:   36:		memcpy(&test, &state, sizeof(struct gameState));
       50:   37:		cardEffect(adventurer, choice1, choice2, choice3, &state, handpos, &bonus);
call    0 returned 100%
        -:   38:
       50:   39:		player = whoseTurn(&test);
call    0 returned 100%
        -:   40:		
        -:   41:		
        -:   42:		//Deck Count
       50:   43:		if(test.deckCount[player]-1 == state.deckCount[player])
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        1:   44:			printf("Passed where deck count is correct\n");
call    0 returned 100%
        -:   45:		else
       49:   46:			printf("Failed where deck count is not correct\n");
call    0 returned 100%
        -:   47:		
        -:   48:		
        -:   49:		//Check the player hands count
       50:   50:		if(test.handCount[player]-1 == state.handCount[player])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   51:			printf("Passed where hand count is correct\n");
call    0 never executed
        -:   52:		else
       50:   53:			printf("Failed where hand count is not correct\n");
call    0 returned 100%
        -:   54:		
        -:   55:		
        -:   56:		//Check players hand
       50:   57:		if(state.hand[player][test.handCount[player]] != -1)
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
       31:   58:			printf("Passed where Adventurer card was added to the players hand\n");
call    0 returned 100%
        -:   59:		else
       19:   60:			printf("Failed where Adventurer card was not added to the players hand\n");
call    0 returned 100%
        -:   61:
        -:   62:		
        -:   63:		//Check if player played a card
       50:   64:		if(test.playedCardCount+2 == state.playedCardCount)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   65:			printf("Passed where player played Adventurer card\n");
call    0 never executed
        -:   66:		else
       50:   67:			printf("Failed where player did not play Adventurer card\n");
call    0 returned 100%
        -:   68:		
        -:   69:		
        -:   70:		//Count Adventurer cards in hand
      125:   71:		for (i = 0; i < state.handCount[0]; i++)
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
       75:   72:			if(state.hand[0][i] = adventurer);
       50:   73:				count1++;
        -:   74:			
      155:   75:		for (i = 0; i < test.handCount[0]; i++)
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
      105:   76:			if(test.hand[0][i] = adventurer);
       50:   77:				count2++;
        -:   78:		
       50:   79:		if(count1 == count2-1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   80:			printf("Passed where there is no variance in Adventurer cards\n");
call    0 never executed
        -:   81:		else
       50:   82:			printf("Failed where there is a variance in Adventurer cards\n");
call    0 returned 100%
        -:   83:		
        -:   84:		
        -:   85:		//Discard Test: Check if card was discarded
       50:   86:		if(test.discardCount[player] == state.discardCount[player])
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
       39:   87:			printf("Passed where the Adventurer was discarded\n");	
call    0 returned 100%
        -:   88:		else
       11:   89:			printf("Failed where the Adventurer was not discarded.\n");
call    0 returned 100%
        -:   90:		
        -:   91:		
        -:   92:		//Action Test: Check if the +1 Action was added
       50:   93:		if(test.numActions+2 == state.numActions)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   94:			printf("Passed where two extra action was added\n");
call    0 never executed
        -:   95:		else
       50:   96:			printf("Failed where two extra action was not added\n");
call    0 returned 100%
        -:   97:	
        -:   98:	}
        1:   99:	printf("----------End Testing Adventurer Card----------\n");
call    0 returned 100%
        1:  100:}
