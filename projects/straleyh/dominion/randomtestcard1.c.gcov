        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:#include <stdio.h>
        -:    8:#include <time.h>
        -:    9:#include <math.h>
        -:   10:
        -:   11:int FAIL_1 = 0;
        -:   12:int FAIL_2 = 0;         
        -:   13:int FAIL_3 = 0;  
        -:   14:int FAIL_4 = 0;
        -:   15:
     2000:   16:void checkSmithyCard(int p, struct gameState *post) {
        -:   17:    int r,s,t,u,v;
        -:   18:    struct gameState pre;
     2000:   19:    int bonus = 0;
        -:   20:
     2000:   21:	memcpy(&pre,post,sizeof(struct gameState));
        -:   22:	
        -:   23:	//call smithyEffect() on post
     2000:   24:	r = smithyEffect(p, post, 0);
        -:   25:	//int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:   26:    //r = cardEffect(smithy,0,0,0,post,0,&bonus);
        -:   27:
        -:   28:	//simulate smithyEffect() on pre 
        -:   29:	//**draw 3 cards
     2000:   30:    s = drawCard(p,&pre);
     2000:   31:    t = drawCard(p,&pre);
     2000:   32:    u = drawCard(p,&pre);
        -:   33:	//**discard current card
     2000:   34:    v = discardCard(0, p, &pre, 0);
        -:   35:
        -:   36:	//check for failures in the above processes
        -:   37:    //**drawcard
     2000:   38:    if (s == -1 && pre.deckCount[p] != 0) {
    #####:   39:        FAIL_3++;
        -:   40:    }
     2000:   41:    if (t == -1 && pre.deckCount[p] != 0) {
    #####:   42:        FAIL_3++;
        -:   43:    }
     2000:   44:    if (u == -1 && pre.deckCount[p] != 0) {
    #####:   45:        FAIL_3++;
        -:   46:    }
        -:   47:    //**discard
     2000:   48:    if (!(r == 0 && v == 0)) {
    #####:   49:        if (r) {
    #####:   50:            FAIL_1++;
        -:   51:        }
    #####:   52:        if (v) {
    #####:   53:            FAIL_2++;
        -:   54:        }
        -:   55:    }
        -:   56:    //**matching decks
     2000:   57:    if (!(post->handCount[p] == pre.handCount[p] && post->deckCount[p] == pre.deckCount[p])) {
     2000:   58:        FAIL_4++;
        -:   59:    }
     2000:   60:}
        -:   61:
        1:   62:int main () {
        1:   63:    printf("-------------------- Testing Card: Smithy ------------------\n");
        -:   64:
        1:   65:    int iterations = 2000;
        -:   66:    int i, n, player;
        -:   67:    struct gameState G;
        1:   68:    srand(time(NULL));
        -:   69:
        -:   70:    // randomly initialized the game state
     2001:   71:    for (n = 0; n < iterations; n++) {
 52602000:   72:        for (i = 0; i < sizeof(struct gameState); i++) {
 52600000:   73:            ((char*)&G)[i] = floor(Random() * 256);
        -:   74:        }
        -:   75:        // randomly select appropriate values
     2000:   76:        player = floor(Random() * MAX_PLAYERS);
     2000:   77:        G.deckCount[player] = floor(Random() * MAX_DECK);
     2000:   78:        G.discardCount[player] = floor(Random() * MAX_DECK);
     2000:   79:        G.handCount[player] = floor(Random() * MAX_HAND);
     2000:   80:        G.playedCardCount = floor(Random() * (MAX_DECK-1));
     2000:   81:        G.whoseTurn = player;
        -:   82:        // call the check function
     2000:   83:        checkSmithyCard(player,&G);
        -:   84:    }
        2:   85:    int totalFails = FAIL_1 + FAIL_2 +
        1:   86:                        FAIL_3 + FAIL_4;
        1:   87:	printf("\n------------------------ RESULTS -------------------------\n");
        1:   88:    printf("PASSED TESTS: %d\n",iterations - totalFails);
        1:   89:    printf("FAILED TESTS: %d\n",totalFails);
        -:   90:
        1:   91:    if (totalFails == 0) {
    #####:   92:        printf ("----------------- PASSED ALL RANDOM TESTS -----------------\n\n");
        -:   93:    }
        -:   94:    else {
        1:   95:        printf("\n--------------------- FAILURE REPORT ---------------------\n");
        1:   96:        printf("cardEffect() failed: %d\n",FAIL_1);
        1:   97:        printf("discardCard() failed: %d\n",FAIL_2);
        1:   98:		printf("drawCard() failed: %d\n",FAIL_3);
        1:   99:        printf("Hand/Deck mismatch: %d\n",FAIL_4);
        1:  100:		printf("\n----------------------------------------------------------\n");
        -:  101:    }
        1:  102:    return 0;
        -:  103:}
